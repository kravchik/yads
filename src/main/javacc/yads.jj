options {
  STATIC = false;    
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(YadsParser)

package yk.lang.yads;
import yk.jcommon.collections.Tuple;
import yk.jcommon.collections.YList;
import yk.lang.yads.YadsSerializer;
import yk.yast.common.YastNode;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;

import static yk.jcommon.collections.YArrayList.al;
import static yk.lang.yads.YadsShorts.*;
import static yk.yast.common.Words.*;

public class YadsParser {
    public static YastNode parse(String s) {
        try {
            return new YadsParser(new ByteArrayInputStream(s.getBytes("UTF-8"))).parseListBodyNode();
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    private YList<Caret> caretStack = al();
    private void beginCaret() {
        Caret caret = Caret.begin(jj_input_stream);
        caretStack.add(caret);
    }

    private void finishCaret(YastNode target) {
        //TODO asserts
        Caret caret = caretStack.remove(caretStack.size() - 1);
        caret.setEnd(jj_input_stream);
        target.map.put(CARET, caret);
    }

}

PARSER_END(YadsParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < UNNAMED_CLASS_BEGIN: "(" >
 |< CLASS_END: ")" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:("-")?(
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  )>
|
  < #DECIMAL_LITERAL: ("-")?(["1"-"9"] (["0"-"9"])* )>
|
  < #HEX_LITERAL: ("-")?("0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )>
|
  < #OCTAL_LITERAL: ("-")?("0" (["0"-"7"])* )>
|
  < FLOATING_POINT_LITERAL:("-")?(
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
)  >
|
  < #EXPONENT: ("-")?(["e","E"] (["+","-"])? (["0"-"9"])+) >
}


TOKEN :
{
  <NAMED_CLASS_BEGIN: (["a"-"z","A"-"Z","0"-"9",".","_"])+ "(">
|
  <ANY_OPERATOR: ((["+","-","/", "*","%","!","=","^","&","|"])+)>
|
  <ANY_LITERAL: (["a"-"z","A"-"Z","0"-"9",".","_"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < STRING_LITERAL_2:
      "'"
      (   (~["'","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
}

YastNode parseClass():
{YList body;String name = null;}
{
    {beginCaret();}
    (name = <NAMED_CLASS_BEGIN>.image | <UNNAMED_CLASS_BEGIN>)
        body = parseListBody()
    <CLASS_END>

    {
        YastNode result;
        if (name != null) result = new YastNode(NODE_TYPE, YADS_RAW_CLASS, NAME, name.substring(0, name.length() - 1), ARGS, body);
        else result = new YastNode(NODE_TYPE, YADS_ARRAY, ARGS, body);
        finishCaret(result);
        return result;
    }
}

YastNode parseListBodyNode():
{YList body;}
{
    {beginCaret();}
      body = parseListBody()
    {
        YastNode result = new YastNode(NODE_TYPE, YADS_ARRAY, ARGS, body);
        finishCaret(result);
        return result;
    }
}

YList parseListBody():
{YList list = al();YastNode value;}
{
    (
     (
       value = parseElement()
       |
       value = parseClass()
     )                                 {list.add(value);}
    )*
    { return list;}
}

YastNode parseElement():
{YastNode o;String s;}
{
    (
    s = <INTEGER_LITERAL>.image {
            if (s.toLowerCase().endsWith("l")) o = constNode(Caret.create(jj_input_stream), "Long", Long.parseLong(s.substring(0, s.length()-1)));
            else o = constNode(Caret.create(jj_input_stream), "Integer", Integer.parseInt(s));}
    |
    s = <FLOATING_POINT_LITERAL>.image {
            if (s.toLowerCase().endsWith("d")) o = constNode(Caret.create(jj_input_stream), "Double", Double.parseDouble(s.substring(0, s.length()-1)));
            else o = constNode(Caret.create(jj_input_stream), "Float", Float.parseFloat(s));}
    |
    s = <ANY_LITERAL>.image {
                Object oo;

                if (s.equals("null")) oo = null;
                else if (s.equals("true")) oo = true;
                else if (s.equals("false")) oo = false;
                else oo = s;

                o = constNode(Caret.create(jj_input_stream), "Literal", oo);}
    |
    s = <ANY_OPERATOR>.image {o = constNode(Caret.create(jj_input_stream), "Operator", s);}
    |
    s = parseString() {o = constNode(Caret.create(jj_input_stream), "String", s);}
    )
    {return o;}
}

Object parseRawElement():
{String s;}
{
    (
    s = <INTEGER_LITERAL>.image {if (s.toLowerCase().endsWith("l")) return Long.parseLong(s.substring(0, s.length()-1)); else return Integer.parseInt(s);}
    |
    s = <FLOATING_POINT_LITERAL>.image {if (s.toLowerCase().endsWith("d")) return Double.parseDouble(s.substring(0, s.length()-1)); else return Float.parseFloat(s);}
    |
    s = <ANY_LITERAL>.image {
                            if (s.equals("null")) return null;
                            if (s.equals("true")) return true;
                            if (s.equals("false")) return false;
                            return s;}
    |
    s = <ANY_OPERATOR>.image {return s;}
    )
    {return null;}
}

String parseString():
{Object o;String s;}
{
    (
    s = <STRING_LITERAL>.image {s = YadsShorts.UNESCAPE_YADS_DOUBLE_QUOTES.translate(s.substring(1, s.length() - 1));}
    |
    s = <STRING_LITERAL_2>.image {s = YadsShorts.UNESCAPE_YADS_SINGLE_QUOTES.translate(s.substring(1, s.length() - 1));}
    )
    {return s;}
}





