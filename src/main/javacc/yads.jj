options {
  STATIC = false;    
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(YadsNodeParser)

package yk.lang.yads;
import yk.lang.yads.utils.Caret;import yk.ycollections.YList;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

import static yk.ycollections.YArrayList.al;
import static yk.lang.yads.utils.YadsWords.*;

public class YadsNodeParser {
    public static YadsNode parse(String s) {
        try {
            return new YadsNodeParser(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8))).parseListBodyNode();
        }  catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    private YList<Caret> caretStack = al();
    private void beginCaret() {
        Caret caret = Caret.begin(jj_input_stream);
        caretStack.add(caret);
    }

    private void finishCaret(YadsNode target) {
        //TODO asserts
        Caret caret = caretStack.remove(caretStack.size() - 1);
        caret.setEnd(jj_input_stream);
        target.map.put(CARET, caret);
    }
}}
}}
}}
}

PARSER_END(YadsNodeParser)


SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :
{
  < UNNAMED_CLASS_BEGIN: "(" >
 |< CLASS_END: ")" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:("-")?(
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  )>
|
  < #DECIMAL_LITERAL: ("-")?(["1"-"9"] (["0"-"9"])* )>
|
  < #HEX_LITERAL: ("-")?("0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )>
|
  < #OCTAL_LITERAL: ("-")?("0" (["0"-"7"])* )>
|
  < FLOATING_POINT_LITERAL:("-")?(
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
)  >
|
  < #EXPONENT: ("-")?(["e","E"] (["+","-"])? (["0"-"9"])+) >
}


TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])*>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <ANY_LITERAL: (["a"-"z","A"-"Z","0"-"9",".","_","$"])+ >
| <NAMED_CLASS_BEGIN: <ANY_LITERAL> "(">
| <ANY_OPERATOR: ((["+","-","/", "*","%","!","=","^","&","|", "<", ">"])+)>
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < STRING_LITERAL_2:
      "'"
      (   (~["'","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
}

YadsNode parseClass():
{YList body;Token name = null;}
{
    {beginCaret();}
    (name = <NAMED_CLASS_BEGIN> | <UNNAMED_CLASS_BEGIN>)
        body = parseListBody()
    <CLASS_END>

    {
        YadsNode result;
        if (name != null) result = new YadsNode(NODE_TYPE, YADS_RAW_CLASS, NAME, name.image.substring(0, name.image.length() - 1), ARGS, body);
        else result = new YadsNode(NODE_TYPE, YADS_ARRAY, ARGS, body);
        finishCaret(result);
        return result;
    }
}

YadsNode parseListBodyNode():
{YList body;}
{
    {beginCaret();}
      body = parseListBody()
    {
        YadsNode result = new YadsNode(NODE_TYPE, YADS_ARRAY, ARGS, body);
        finishCaret(result);
        return result;
    }
}

YList parseListBody():
{YList list = al();YadsNode value;}
{
    (
     (
       value = parseElement()
       |
       value = parseClass()
     )                                 {list.add(value);}
    )*
    { return list;}
}

YadsNode parseElement():
{YadsNode o;Token t;String s;}
{
    (
    t = <SINGLE_LINE_COMMENT> { o = new YadsNode(NODE_TYPE, COMMENT_SINGLE_LINE, VALUE, t.image, CARET, Caret.create(jj_input_stream));}
    |
    t = <MULTI_LINE_COMMENT> { o = new YadsNode(NODE_TYPE, COMMENT_MULTI_LINE, VALUE, t.image, CARET, Caret.create(jj_input_stream));}
    |
    t = <INTEGER_LITERAL> {
            s = t.image;
            if (s.toLowerCase().endsWith("l")) o = constNode(Caret.create(jj_input_stream), "Long", Long.parseLong(s.substring(0, s.length()-1)));
            else o = constNode(Caret.create(jj_input_stream), "Integer", Integer.parseInt(s));}
    |
    t = <FLOATING_POINT_LITERAL> {
            s = t.image;
            if (s.toLowerCase().endsWith("d")) o = constNode(Caret.create(jj_input_stream), "Double", Double.parseDouble(s.substring(0, s.length()-1)));
            else o = constNode(Caret.create(jj_input_stream), "Float", Float.parseFloat(s));}
    |
    t = <ANY_LITERAL> {
            s = t.image;
            Object oo;

            if (s.equals("null")) oo = null;
            else if (s.equals("true")) oo = true;
            else if (s.equals("false")) oo = false;
            else oo = s;

            o = constNode(Caret.create(jj_input_stream), "Literal", oo);}
    |
    t = <ANY_OPERATOR> {o = constNode(Caret.create(jj_input_stream), "Operator", t.image);}
    |
    s = parseString() {o = constNode(Caret.create(jj_input_stream), "String", s);}
    )
    {return o;}
}

//TODO remove! not actually used for parsing
Object parseRawElement():
{Token t;String s;}
{
    (
    t = <INTEGER_LITERAL> {s = t.image;if (s.toLowerCase().endsWith("l")) return Long.parseLong(s.substring(0, s.length()-1)); else return Integer.parseInt(s);}
    |
    t = <FLOATING_POINT_LITERAL> {s = t.image;if (s.toLowerCase().endsWith("d")) return Double.parseDouble(s.substring(0, s.length()-1)); else return Float.parseFloat(s);}
    |
    t = <ANY_LITERAL> {
                            s = t.image;
                            if (s.equals("null")) return null;
                            if (s.equals("true")) return true;
                            if (s.equals("false")) return false;
                            return s;}
    |
    t = <ANY_OPERATOR> {return t.image;}
    )
    {return null;}
}

String parseString():
{Object o;Token t;}
{
    t = <STRING_LITERAL> {return YadsUtils.unescapeDoubleQuotes(t.image);}
    |
    t = <STRING_LITERAL_2> {return YadsUtils.unescapeSingleQuotes(t.image);}
}





